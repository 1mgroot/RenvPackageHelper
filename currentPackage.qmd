---
title: "Current Package Dependencies"
format: html
---

This document provides essential information about the project's R environment and dependencies.

## R Environment

```{r}
#| warning: false
#| message: false

# Display R version and library paths
info <- data.frame(
  Item = c("R Version", "Library Paths"),
  Value = c(
    R.version.string,
    paste(.libPaths(), collapse = "\n")
  )
)

knitr::kable(info)
```

## Direct Dependencies

These are the packages explicitly required by our project:

```{r}
#| warning: false
#| message: false

# Get direct dependencies from renv.lock
get_direct_deps <- function() {
  if (file.exists("renv.lock")) {
    lock <- jsonlite::fromJSON("renv.lock")
    if ("Packages" %in% names(lock)) {
      deps <- names(lock$Packages)
      versions <- sapply(lock$Packages, function(x) x$Version)
      
      deps_df <- data.frame(
        Package = deps,
        Version = versions
      )
      return(deps_df[order(deps_df$Package), ])
    }
  }
  return(data.frame())
}

knitr::kable(get_direct_deps())
```

## All Dependencies

This shows all dependencies (both direct and indirect):

```{r}
#| warning: false
#| message: false

# Get all dependencies
get_all_deps <- function() {
  direct_deps <- get_direct_deps()$Package
  all_deps <- unique(unlist(tools::package_dependencies(direct_deps, recursive = TRUE)))
  
  deps_df <- data.frame(
    Package = all_deps,
    Type = "Indirect"
  )
  
  # Mark direct dependencies
  deps_df$Type[deps_df$Package %in% direct_deps] <- "Direct"
  
  # Sort by type (Direct first) then by package name
  deps_df <- deps_df[order(deps_df$Type, deps_df$Package), ]
  return(deps_df)
}

knitr::kable(get_all_deps())
```

## Session Information

```{r}
#| warning: false
#| message: false
sessionInfo()
``` 